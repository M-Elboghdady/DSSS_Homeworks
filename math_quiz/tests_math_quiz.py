import unittest
from math_quiz import generate_random_integer, generate_random_operator, generate_problem_and_answer


class TestMathGame(unittest.TestCase):

    def test_generate_random_integer(self):
        """
        Test if random numbers generated by function_A are within the specified range.
         """
        min_val = 1
        max_val = 10
        for _ in range(1000):  # Test a large number of random values
            rand_num = generate_random_integer(min_val, max_val)
            self.assertTrue(min_val <= rand_num <= max_val, f"Failed for random number: {rand_num}")

    def test_generate_random_operator(self):
        """
        Test if function_B randomly returns one of the valid operators: '+', '-', or '*'.
        """
        valid_operators = ['+', '-', '*']
        for _ in range(1000):  # Test a large number of random values
            operator = generate_random_operator()
            self.assertIn(operator, valid_operators, f"Invalid operator returned: {operator}")

    def test_generate_problem_and_answer(self):
        """
        Test the math problem and answer generation in function_C.
        """
        test_cases = [
            (5, 2, '+', '5 + 2', 7),
            (10, 4, '-', '10 - 4', 6),
            (3, 7, '*', '3 * 7', 21),
            (8, 5, '-', '8 - 5', 3),
            (6, 9, '+', '6 + 9', 15)
        ]

        for num1, num2, operator, expected_problem, expected_answer in test_cases:
            problem, answer = generate_problem_and_answer(num1, num2, operator)
            self.assertEqual(problem, expected_problem, f"Problem mismatch for {num1} {operator} {num2}")
            self.assertEqual(answer, expected_answer, f"Answer mismatch for {num1} {operator} {num2}")

if __name__ == "__main__":
    unittest.main()

